cmake_minimum_required(VERSION 3.26)

message("")

message("CMAKE_SYSTEM_NAME: ${CMAKE_SYSTEM_NAME}")
message("CMAKE_SYSTEM_VERSION: ${CMAKE_SYSTEM_VERSION}")
message("CMAKE_SYSTEM_PROCESSOR: ${CMAKE_SYSTEM_PROCESSOR}")

message("")

message("CMAKE_HOST_SYSTEM: ${CMAKE_HOST_SYSTEM}")
message("CMAKE_HOST_SYSTEM_NAME: ${CMAKE_HOST_SYSTEM_NAME}")
message("CMAKE_HOST_SYSTEM_VERSION: ${CMAKE_HOST_SYSTEM_VERSION}")
message("CMAKE_HOST_SYSTEM_PROCESSOR: ${CMAKE_HOST_SYSTEM_PROCESSOR}")

message("")

message("CMAKE_HOST_APPLE: ${CMAKE_HOST_APPLE}")
message("CMAKE_HOST_WIN32: ${CMAKE_HOST_WIN32}")
message("CMAKE_HOST_UNIX: ${CMAKE_HOST_UNIX}")
message("CMAKE_HOST_CYGWIN: ${CMAKE_HOST_CYGWIN}")
message("CMAKE_HOST_IOS: ${CMAKE_HOST_IOS}")
message("CMAKE_HOST_ANDROID: ${CMAKE_HOST_ANDROID}")
message("CMAKE_HOST_WINCE: ${CMAKE_HOST_WINCE}")
message("CMAKE_HOST_WINDOWS_PHONE: ${CMAKE_HOST_WINDOWS_PHONE}")

message("")

message("CMAKE_CXX_BYTE_ORDER: ${CMAKE_CXX_BYTE_ORDER}")
include(TestBigEndian)
if(IS_BIG_ENDIAN)
    message("System is big endian.")
else()
    message("System is little endian.")
endif()

message("")

cmake_host_system_information(RESULT HOST_SYSTEM_INFO
    QUERY
    HOSTNAME OS_NAME OS_RELEASE OS_VERSION OS_PLATFORM
    FQDN
    TOTAL_PHYSICAL_MEMORY AVAILABLE_PHYSICAL_MEMORY
    TOTAL_VIRTUAL_MEMORY AVAILABLE_VIRTUAL_MEMORY
    NUMBER_OF_LOGICAL_CORES NUMBER_OF_PHYSICAL_CORES
    HAS_SERIAL_NUMBER
    PROCESSOR_NAME PROCESSOR_DESCRIPTION PROCESSOR_SERIAL_NUMBER
    IS_64BIT
    HAS_FPU HAS_MMX HAS_MMX_PLUS HAS_SSE HAS_SSE2 HAS_SSE_FP HAS_SSE_MMX
    HAS_AMD_3DNOW HAS_AMD_3DNOW_PLUS HAS_IA64
)

list(GET HOST_SYSTEM_INFO 0 HOSTNAME)
message("HOSTNAME: ${HOSTNAME}")
list(GET HOST_SYSTEM_INFO 1 OS_NAME)
message("OS_NAME: ${OS_NAME}")
list(GET HOST_SYSTEM_INFO 2 OS_RELEASE)
message("OS_RELEASE: ${OS_RELEASE}")
list(GET HOST_SYSTEM_INFO 3 OS_VERSION)
message("OS_VERSION: ${OS_VERSION}")
list(GET HOST_SYSTEM_INFO 4 OS_PLATFORM)
message("OS_PLATFORM: ${OS_PLATFORM}")
list(GET HOST_SYSTEM_INFO 5 FQDN)
message("FQDN: ${FQDN}")
list(GET HOST_SYSTEM_INFO 6 TOTAL_PHYSICAL_MEMORY)
message("TOTAL_PHYSICAL_MEMORY: ${TOTAL_PHYSICAL_MEMORY}")
list(GET HOST_SYSTEM_INFO 7 AVAILABLE_PHYSICAL_MEMORY)
message("AVAILABLE_PHYSICAL_MEMORY: ${AVAILABLE_PHYSICAL_MEMORY}")
list(GET HOST_SYSTEM_INFO 8 TOTAL_VIRTUAL_MEMORY)
message("TOTAL_VIRTUAL_MEMORY: ${TOTAL_VIRTUAL_MEMORY}")
list(GET HOST_SYSTEM_INFO 9 AVAILABLE_VIRTUAL_MEMORY)
message("AVAILABLE_VIRTUAL_MEMORY: ${AVAILABLE_VIRTUAL_MEMORY}")
list(GET HOST_SYSTEM_INFO 10 NUMBER_OF_LOGICAL_CORES)
message("NUMBER_OF_LOGICAL_CORES: ${NUMBER_OF_LOGICAL_CORES}")
list(GET HOST_SYSTEM_INFO 11 NUMBER_OF_PHYSICAL_CORES)
message("NUMBER_OF_PHYSICAL_CORES: ${NUMBER_OF_PHYSICAL_CORES}")
list(GET HOST_SYSTEM_INFO 12 HAS_SERIAL_NUMBER)
message("HAS_SERIAL_NUMBER: ${HAS_SERIAL_NUMBER}")
list(GET HOST_SYSTEM_INFO 13 PROCESSOR_NAME)
message("PROCESSOR_NAME: ${PROCESSOR_NAME}")
list(GET HOST_SYSTEM_INFO 14 PROCESSOR_DESCRIPTION)
message("PROCESSOR_DESCRIPTION: ${PROCESSOR_DESCRIPTION}")
list(GET HOST_SYSTEM_INFO 15 PROCESSOR_SERIAL_NUMBER)
message("PROCESSOR_SERIAL_NUMBER: ${PROCESSOR_SERIAL_NUMBER}")
list(GET HOST_SYSTEM_INFO 16 IS_64BIT)
message("IS_64BIT: ${IS_64BIT}")
list(GET HOST_SYSTEM_INFO 17 HAS_FPU)
message("HAS_FPU: ${HAS_FPU}")
list(GET HOST_SYSTEM_INFO 18 HAS_MMX)
message("HAS_MMX: ${HAS_MMX}")
list(GET HOST_SYSTEM_INFO 19 HAS_MMX_PLUS)
message("HAS_MMX_PLUS: ${HAS_MMX_PLUS}")
list(GET HOST_SYSTEM_INFO 20 HAS_SSE)
message("HAS_SSE: ${HAS_SSE}")
list(GET HOST_SYSTEM_INFO 21 HAS_SSE2)
message("HAS_SSE2: ${HAS_SSE2}")
list(GET HOST_SYSTEM_INFO 22 HAS_SSE_FP)
message("HAS_SSE_FP: ${HAS_SSE_FP}")
list(GET HOST_SYSTEM_INFO 23 HAS_SSE_MMX)
message("HAS_SSE_MMX: ${HAS_SSE_MMX}")
list(GET HOST_SYSTEM_INFO 24 HAS_AMD_3DNOW)
message("HAS_AMD_3DNOW: ${HAS_AMD_3DNOW}")
list(GET HOST_SYSTEM_INFO 25 HAS_AMD_3DNOW_PLUS)
message("HAS_AMD_3DNOW_PLUS: ${HAS_AMD_3DNOW_PLUS}")
list(GET HOST_SYSTEM_INFO 26 HAS_IA64)
message("HAS_IA64: ${HAS_IA64}")

message("")
